# --- Configuration ---
# The name of the final executable
TARGET := app

# The C compiler to use
CC := gcc

# Compiler flags:
# -Wall: enables all common warnings
# -Wextra: enables extra warnings
# -std=c99 or -std=c11: specifies the C standard version
# -Iinclude: tells the compiler to look in the 'include' directory for headers
CFLAGS := -Wall -Wextra -std=c99 -Iinclude

# Linker flags (optional, for external libraries like -lm for math)
LDFLAGS :=

# --- Source Files and Directories ---
SRC_DIR := src
OBJ_DIR := obj

# Find all .c files in the source directory
SOURCES := $(wildcard $(SRC_DIR)/*.c)

# Convert source file list to object file list
OBJECTS := $(patsubst $(SRC_DIR)/%.c,$(OBJ_DIR)/%.o,$(SOURCES))

# --- Targets ---

# 1. Default target (builds and links the executable)
.PHONY: all
all: $(OBJ_DIR) $(TARGET)

# Create the object directory if it doesn't exist
$(OBJ_DIR):
	@mkdir -p $@

# 2. Rule to link object files into the final executable
$(TARGET): $(OBJECTS)
	@echo "Linking $@"
	$(CC) $(OBJECTS) $(LDFLAGS) -o $@

# 3. Rule to compile each .c file into a .o file
# Uses automatic variables: $< (the prerequisite .c file), $@ (the target .o file)
# NEW: Adds the object directory as a secondary prerequisite
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c | $(OBJ_DIR)
	@echo "Compiling $<"
	$(CC) $(CFLAGS) -c $< -o $@

# 4. Target to run the compiled executable
.PHONY: run
run: $(TARGET)
	@echo "Running $(TARGET)..."
	./$(TARGET)

# 5. Target to clean up generated files
.PHONY: clean
clean:
	@echo "Cleaning up..."
	@rm -f $(TARGET)
	@rm -rf $(OBJ_DIR)