// Auto-generated by Lox. Do not edit.

import { Expr } from "@/expression/expr";
import { Token } from "@/tokens/token";

export interface StmtVisitor<R> {
    visitBlockStmt(stmt: StmtBlock): R;
    visitExpressionStmt(stmt: StmtExpression): R;
    visitIfStmt(stmt: StmtIf): R;
    visitPrintStmt(stmt: StmtPrint): R;
    visitVarStmt(stmt: StmtVar): R;
    visitWhileStmt(stmt: StmtWhile): R;
}

export abstract class Stmt {
    abstract accept<R>(visitor: StmtVisitor<R>): R;
}

export class StmtBlock extends Stmt {
    constructor(public readonly statements: Stmt[]) {
        super();
    }

    accept<R>(visitor: StmtVisitor<R>): R {
        return visitor.visitBlockStmt(this);
    }
}

export class StmtExpression extends Stmt {
    constructor(public readonly expression: Expr) {
        super();
    }

    accept<R>(visitor: StmtVisitor<R>): R {
        return visitor.visitExpressionStmt(this);
    }
}

export class StmtIf extends Stmt {
    constructor(
        public readonly condition: Expr,
        public readonly thenBranch: Stmt,
        public readonly elseBranch?: Stmt,
    ) {
        super();
    }

    accept<R>(visitor: StmtVisitor<R>): R {
        return visitor.visitIfStmt(this);
    }
}

export class StmtPrint extends Stmt {
    constructor(public readonly expression: Expr) {
        super();
    }

    accept<R>(visitor: StmtVisitor<R>): R {
        return visitor.visitPrintStmt(this);
    }
}

export class StmtVar extends Stmt {
    constructor(
        public readonly name: Token,
        public readonly initializer: Expr | null,
    ) {
        super();
    }

    accept<R>(visitor: StmtVisitor<R>): R {
        return visitor.visitVarStmt(this);
    }
}

export class StmtWhile extends Stmt {
    constructor(
        public readonly condition: Expr,
        public readonly body: Stmt,
    ) {
        super();
    }

    accept<R>(visitor: StmtVisitor<R>): R {
        return visitor.visitWhileStmt(this);
    }
}
