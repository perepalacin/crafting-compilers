// Auto-generated by Lox. Do not edit.

import { Expr } from "@/expression/expr";
import { Token } from "@/tokens/token";

export interface StmtVisitor<R> {
    visitExpressionStmt(stmt: StmtExpression): R;
    visitPrintStmt(stmt: StmtPrint): R;
    visitVarStmt(stmt: StmtVar): R;
}

export abstract class Stmt {
    abstract accept<R>(visitor: StmtVisitor<R>): R;
}

export class StmtExpression extends Stmt {
    constructor(public readonly expression: Expr) {
        super();
    }

    accept<R>(visitor: StmtVisitor<R>): R {
        return visitor.visitExpressionStmt(this);
    }
}

export class StmtPrint extends Stmt {
    constructor(public readonly expression: Expr) {
        super();
    }

    accept<R>(visitor: StmtVisitor<R>): R {
        return visitor.visitPrintStmt(this);
    }
}

export class StmtVar extends Stmt {
    constructor(
        public readonly name: Token,
        public readonly initializer: Expr | null,
    ) {
        super();
    }

    accept<R>(visitor: StmtVisitor<R>): R {
        return visitor.visitVarStmt(this);
    }
}
